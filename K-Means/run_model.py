import pandas as pd
import joblib
import pickle

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•, scaler ‡πÅ‡∏•‡∏∞ mapping
kmeans = joblib.load('customer_kmeans.pkl')
scaler = joblib.load('customer_scaler.pkl')

with open("cluster_names.pkl", "rb") as f:
    cluster_names = pickle.load(f)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
try:
    df_all = joblib.load('customer_data.pkl')
except FileNotFoundError:
    # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    df_all = pd.DataFrame(columns=['Recency', 'Frequency', 'Monetary', 'CustomerID', 'Cluster'])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°
def predict_customer_group(customer_data):
    df_new = pd.DataFrame([customer_data], columns=['Recency', 'Frequency', 'Monetary', 'CustomerID'])
    X_scaled = scaler.transform(df_new[['Recency', 'Frequency', 'Monetary']])
    cluster_id = kmeans.predict(X_scaled)[0]
    group_name = cluster_names.get(cluster_id, "Unknown")
    df_new['Cluster'] = cluster_id
    return df_new, cluster_id, group_name

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
def get_ad_strategy(group_name):
    if group_name == "üíé ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP":
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üåü ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 15% + ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ"}
    elif group_name == "üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î":
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üî• Flash Sale ‡∏™‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°! ‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50%", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏ã‡∏∑‡πâ‡∏≠ 2 ‡πÅ‡∏ñ‡∏° 1 + ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á 100 ‡∏ö‡∏≤‡∏ó"}
    else:  # üò¥ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üíî ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì!", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 30% (7 ‡∏ß‡∏±‡∏ô)"}

# ------------------ MAIN ------------------
if __name__ == "__main__":
    # ‚úèÔ∏è ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    Recency = 30 # ‡∏ß‡∏±‡∏ô
    Frequency = 12 # ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏õ‡∏µ
    Monetary = 15000 # ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ
    CustomerID = "CUST001"
    customer_data = [Recency, Frequency, Monetary, CustomerID]

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°
    df_new, cluster_id, group_name = predict_customer_group(customer_data)
    strategy = get_ad_strategy(group_name)

    # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    updated_df = pd.concat([df_all, df_new], ignore_index=True)
    joblib.dump(updated_df, 'customer_data.pkl')

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    print("üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:", customer_data[3])
    print("üéØ ‡∏Å‡∏•‡∏∏‡πà‡∏°:", group_name)
    print("üì¢ ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤:", strategy['‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤'])
    print("üéÅ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠:", strategy['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠'])
