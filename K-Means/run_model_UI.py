import pandas as pd
import joblib
import pickle
import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import messagebox

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•, scaler ‡πÅ‡∏•‡∏∞ mapping
kmeans = joblib.load('customer_kmeans.pkl')
scaler = joblib.load('customer_scaler.pkl')

with open("cluster_names.pkl", "rb") as f:
    cluster_names = pickle.load(f)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
try:
    df_all = joblib.load('customer_data.pkl')
except FileNotFoundError:
    df_all = pd.DataFrame(columns=['Recency', 'Frequency', 'Monetary', 'CustomerID', 'Cluster'])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°
def predict_customer_group(customer_data):
    df_new = pd.DataFrame([customer_data], columns=['Recency', 'Frequency', 'Monetary', 'CustomerID'])
    X_scaled = scaler.transform(df_new[['Recency', 'Frequency', 'Monetary']])
    cluster_id = kmeans.predict(X_scaled)[0]
    group_name = cluster_names.get(cluster_id, "Unknown")
    df_new['Cluster'] = cluster_id
    return df_new, cluster_id, group_name

def get_ad_strategy(group_name):
    if group_name == "üíé ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP":
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üåü ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 15% + ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ"}
    elif group_name == "üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î":
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üî• Flash Sale ‡∏™‡∏∏‡∏î‡∏Ñ‡∏∏‡πâ‡∏°! ‡∏•‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50%", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏ã‡∏∑‡πâ‡∏≠ 2 ‡πÅ‡∏ñ‡∏° 1 + ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á 100 ‡∏ö‡∏≤‡∏ó"}
    else:  # üò¥ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        return {"‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤": "üíî ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì!", "‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠": "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î 30% (7 ‡∏ß‡∏±‡∏ô)"}

def save_and_predict():
    try:
        recency = float(entry_recency.get())
        frequency = float(entry_frequency.get())
        monetary = float(entry_monetary.get())
        customer_id = entry_customer_id.get().strip()

        if not customer_id:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å CustomerID")
            return

        customer_data = [recency, frequency, monetary, customer_id]
        df_new, cluster_id, group_name = predict_customer_group(customer_data)
        strategy = get_ad_strategy(group_name)

        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        updated_df = pd.concat([df_all, df_new], ignore_index=True)
        joblib.dump(updated_df, 'customer_data.pkl')

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        result_text.set(f"üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer_id}\nüéØ ‡∏Å‡∏•‡∏∏‡πà‡∏°: {group_name}\nüì¢ ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤: {strategy['‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤']}\nüéÅ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠: {strategy['‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠']}")

    except ValueError:
        messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô Recency, Frequency, Monetary ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def clear():
    entry_recency.delete(0, 'end')
    entry_frequency.delete(0, 'end')
    entry_monetary.delete(0, 'end')
    entry_customer_id.delete(0, 'end')
    result_text.set("")

# ---------------- UI ----------------
root = tb.Window(themename="cosmo")
root.title("Customer Segmentation")
root.geometry("600x500")

title_label = tb.Label(root, text="üìä Customer Segmentation", font=("Tahoma", 18, "bold"))
title_label.pack(pady=15)

form_frame = tb.Frame(root)
form_frame.pack(pady=10)

fields = [
    ("Customer ID", "entry_customer_id"),
    ("‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô)", "entry_recency"),
    ("‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏õ‡∏µ)", "entry_frequency"),
    ("‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ)", "entry_monetary")
]

entry_recency = None
entry_frequency = None
entry_monetary = None
entry_customer_id = None

for i, (label, var_name) in enumerate(fields):
    tb.Label(form_frame, text=label, font=("Tahoma", 12)).grid(row=i, column=0, sticky="w", padx=10, pady=5)
    entry = tb.Entry(form_frame, font=("Tahoma", 12), width=25)
    entry.grid(row=i, column=1, padx=10, pady=5)
    globals()[var_name] = entry

btn_frame = tb.Frame(root)
btn_frame.pack(pady=15)

tb.Button(btn_frame, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", bootstyle=SUCCESS, command=save_and_predict).grid(row=0, column=0, padx=10)
tb.Button(btn_frame, text="‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤", bootstyle=WARNING, command=clear).grid(row=0, column=1, padx=10)

result_text = tb.StringVar()
tb.Label(root, textvariable=result_text, font=("Tahoma", 12), wraplength=500, justify="left", foreground="#0066CC").pack(pady=15)

root.mainloop()
