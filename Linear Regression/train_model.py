import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import joblib

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print("üå§Ô∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß...")
dataset = pd.read_csv("Weather_clean_data.csv", low_memory=False)

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
data = dataset[['MaxTemp', 'MinTemp', 'Precip', 'MeanTemp']].copy()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á target ‡πÉ‡∏´‡∏°‡πà: MeanTemp ‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
data['NextMeanTemp'] = data['MeanTemp'].shift(-1)

# ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà target ‡πÄ‡∏õ‡πá‡∏ô NaN (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
data = data.dropna()

# ‡πÅ‡∏¢‡∏Å X, y
X = data[['MaxTemp', 'MinTemp', 'Precip']]
y = data['NextMeanTemp']

# ‡πÅ‡∏ö‡πà‡∏á train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=0
)

print(f"\nüéØ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(f"   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏£‡∏ô: {len(X_train)} ‡∏ß‡∏±‡∏ô")
print(f"   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(X_test)} ‡∏ß‡∏±‡∏ô")

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
print(f"\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• AI...")
model = LinearRegression()
model.fit(X_train, y_train)

# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
y_pred = model.predict(X_test)
mae = metrics.mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(metrics.mean_squared_error(y_test, y_pred))
r2 = metrics.r2_score(y_test, y_pred)

print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô AI:")
print(f"   üéØ MAE: {mae:.2f}¬∞C")
print(f"   üìè RMSE: {rmse:.2f}¬∞C")
print(f"   üìà R¬≤ Score: {r2:.4f} ({r2*100:.1f}%)")

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
joblib.dump(model, "weather_model.pkl")
print("\nüíæ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå: weather_model.pkl")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 10 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î test
print("\nüîé ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 10 ‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î Test:")
sample_results = pd.DataFrame({
    "MaxTemp |": X_test["MaxTemp"].values,
    "MinTemp |": X_test["MinTemp"].values,
    "Precip |": X_test["Precip"].values,
    "‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á |": y_test.values, # MeanTemp
    "‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢": y_pred
})

# ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 10 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å test set
print(sample_results.sample(10, random_state=42).to_string(index=False,
    formatters={
        "MaxTemp |": "{:.2f}¬∞C".format,
        "MinTemp |": "{:.2f}¬∞C".format,
        "‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á |": "{:.2f}¬∞C".format,
        "‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢": "{:.2f}¬∞C".format
    }))